<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gouyang</title>
    <link>http://gouyang.github.io/</link>
    <description>Recent content on Gouyang</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 20 May 2016 11:06:58 +0800</lastBuildDate>
    
	<atom:link href="http://gouyang.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go top tip collections</title>
      <link>http://gouyang.github.io/go/top_tip/</link>
      <pubDate>Fri, 20 May 2016 11:06:58 +0800</pubDate>
      
      <guid>http://gouyang.github.io/go/top_tip/</guid>
      <description>&lt;p&gt;Go top tip collections.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Put $GOPATH/bin in your $PATH, so installed binaries are easily accessible.&lt;/li&gt;
&lt;li&gt;If your repo foo is primarily a binary, put your library code in a lib/ subdir, and call it package foo.&lt;/li&gt;
&lt;li&gt;If your repo is primarily a library, put your binaries in separate subdirectories under cmd/.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://talks.golang.org/2014/names.slide&#34;&gt;Idiomatic naming conventions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Only func main has the right to decide which flags are available to the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go libraries</title>
      <link>http://gouyang.github.io/go/go_libraries/</link>
      <pubDate>Fri, 18 Dec 2015 13:35:44 +0800</pubDate>
      
      <guid>http://gouyang.github.io/go/go_libraries/</guid>
      <description>Collect go libraries which I has been familar with and possibly will use it in future.
microservices #############
 A Go toolkit for microservices A Microservice Toolkit from The New York Times  Testing Frameworks ##################
 Ginkgo Goconvey  </description>
    </item>
    
    <item>
      <title>Go Collections</title>
      <link>http://gouyang.github.io/go/go_resources/</link>
      <pubDate>Wed, 09 Dec 2015 13:40:58 +0800</pubDate>
      
      <guid>http://gouyang.github.io/go/go_resources/</guid>
      <description>&lt;p&gt;Go Collections&lt;/p&gt;

&lt;h1 id=&#34;go-blogs&#34;&gt;Go blogs&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/Blogs&#34;&gt;Go Blog list from Go wiki&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/&#34;&gt;The official Go Blog&lt;/a&gt; - For in depth posts by the Go team&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.gopheracademy.com/&#34;&gt;Gopher Academy Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dave.cheney.net/&#34;&gt;Dave Cheney&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dave.cheney.net/resources-for-new-go-programmers&#34;&gt;Dave Cheney&amp;rsquo;s Resources for Go Programmers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spf13.com/post/&#34;&gt;spf13&amp;rsquo;s Go Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://whipperstacker.com/&#34;&gt;Katrina Owen&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@matryer&#34;&gt;Mat Ryer&amp;rsquo;s Medium Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://matt.aimonetti.net/&#34;&gt;Matt Aimonetti&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://marcio.io/&#34;&gt;Marcio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://whizdumb.me/&#34;&gt;Whizdumb&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://carlosbecker.com/&#34;&gt;Carlos Becker&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.goinggo.net/&#34;&gt;Ardan Studios Going Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://golangweekly.com/&#34;&gt;The Golang Weekly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.alexedwards.net/blog/category/golang&#34;&gt;Alex Edward&amp;rsquo;s Golang Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mlafeldt.github.io/&#34;&gt;Mathias Lafeldt&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.ksub.org/bytes/&#34;&gt;Marcelo Magallon&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Set default browser in terminal</title>
      <link>http://gouyang.github.io/linux/set_default_broswer/</link>
      <pubDate>Sun, 06 Sep 2015 19:52:02 +0800</pubDate>
      
      <guid>http://gouyang.github.io/linux/set_default_broswer/</guid>
      <description>&lt;p&gt;How to set the default browser in terminal for every applications?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve searched this and figured it out long time before, but still spend lots of time to find the answer today.
It seems the perfectly way is, add below contents to ~/.local/share/applications/mimeapps.list.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Some Simple and daily github flows</title>
      <link>http://gouyang.github.io/linux/some_daily_git_tips/</link>
      <pubDate>Wed, 02 Sep 2015 09:56:21 +0800</pubDate>
      
      <guid>http://gouyang.github.io/linux/some_daily_git_tips/</guid>
      <description>&lt;p&gt;Here records some simple github workflows, all of these can be searched out on github help.&lt;br /&gt;
Based on my personal experience so far, they looks like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Syncing a fork repo from upstream&lt;/li&gt;
&lt;li&gt;Send PR based on branch&lt;/li&gt;
&lt;li&gt;Pull a PR to local for testing or merging.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Improve presentation skills</title>
      <link>http://gouyang.github.io/diary/improve_presentation_skills/</link>
      <pubDate>Thu, 30 Jul 2015 15:42:16 +0800</pubDate>
      
      <guid>http://gouyang.github.io/diary/improve_presentation_skills/</guid>
      <description>&lt;p&gt;Attend a course &amp;ldquo;Presentation skills&amp;rdquo; recently, summarizing it here.&lt;/p&gt;

&lt;h4 id=&#34;three-obstacles-of-effectively-speech&#34;&gt;Three obstacles of effectively speech:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;People are easy to forget, even for those they just hear about.&lt;/li&gt;
&lt;li&gt;People are easy to judge the speaker by their first impressions.&lt;/li&gt;
&lt;li&gt;Two many disattractions for both the speaker and audiences.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&amp;ldquo;if you can&amp;rsquo;t explain it simply you don&amp;rsquo;t understand it well enough.&amp;rdquo; - einstein&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Customize Desktop - Awesome WM</title>
      <link>http://gouyang.github.io/linux/awesome_wm/</link>
      <pubDate>Tue, 14 Apr 2015 20:38:58 +0800</pubDate>
      
      <guid>http://gouyang.github.io/linux/awesome_wm/</guid>
      <description>&lt;p&gt;Once I have tried Awesome window manager, I will not leave it.&lt;/p&gt;

&lt;p&gt;Awesome becomes my favor WM because it&amp;rsquo;s really lightweight, and a few shortcuts meet my all needs.&lt;/p&gt;

&lt;p&gt;I intend to make it as lean as possible with less configurations.&lt;/p&gt;

&lt;h1 id=&#34;first-the-layouts&#34;&gt;First, the layouts.&lt;/h1&gt;

&lt;p&gt;There are totally 12 layouts can be used, after try each of them, I only use 3 of them now.
Maybe others is useful for some cases, which I do not aware of them becore I really know how to use them.&lt;/p&gt;

&lt;p&gt;The three I used are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;floating&lt;/li&gt;
&lt;li&gt;tile&lt;/li&gt;
&lt;li&gt;max&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most used layouts by me is max, because I need a big screen for everything. Tile is used for
compare something or copy-read something, like copy content from browser to vim, some websites do not support copy.&lt;/p&gt;

&lt;p&gt;So I comment others and use the three like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {}
for s = 1, screen.count() do
    -- Each screen has its own tag table.
    tags[s] = awful.tag({ 1, 2, 3 }, s, {layouts[3], layouts[2], layouts[1]})
end
-- }}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>